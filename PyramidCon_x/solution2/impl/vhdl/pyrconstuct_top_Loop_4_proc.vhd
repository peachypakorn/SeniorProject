-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyrconstuct_top_Loop_4_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fftPyrOut_M_real_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    fftPyrOut_M_real_V_empty_n : IN STD_LOGIC;
    fftPyrOut_M_real_V_read : OUT STD_LOGIC;
    fftPyrOut_M_imag_V_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    fftPyrOut_M_imag_V_empty_n : IN STD_LOGIC;
    fftPyrOut_M_imag_V_read : OUT STD_LOGIC;
    imgInTmp2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    imgInTmp2_full_n : IN STD_LOGIC;
    imgInTmp2_write : OUT STD_LOGIC );
end;


architecture behav of pyrconstuct_top_Loop_4_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal i6_reg_67 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_78_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_123 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_50 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_64 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal i_fu_84_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_bdd_77 : BOOLEAN;
    signal tmp_2_fu_100_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_90_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_129 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond2_fu_78_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_77))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond2_fu_78_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_77)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond2_fu_78_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i6_reg_67 assign process. --
    i6_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond2_fu_78_p2 = ap_const_lv1_0))) then 
                i6_reg_67 <= i_fu_84_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_77))) then 
                i6_reg_67 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                exitcond2_reg_123 <= exitcond2_fu_78_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond2_fu_78_p2, ap_reg_ppiten_pp0_it0, ap_sig_bdd_64, ap_reg_ppiten_pp0_it1, ap_sig_bdd_77)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_77)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond2_fu_78_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond2_fu_78_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st4_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st4_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st4_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_129 assign process. --
    ap_sig_bdd_129_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_129 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_50 assign process. --
    ap_sig_bdd_50_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_50 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_64 assign process. --
    ap_sig_bdd_64_assign_proc : process(fftPyrOut_M_real_V_empty_n, fftPyrOut_M_imag_V_empty_n, imgInTmp2_full_n, exitcond2_reg_123)
    begin
                ap_sig_bdd_64 <= (((fftPyrOut_M_real_V_empty_n = ap_const_logic_0) and (exitcond2_reg_123 = ap_const_lv1_0)) or ((exitcond2_reg_123 = ap_const_lv1_0) and (fftPyrOut_M_imag_V_empty_n = ap_const_logic_0)) or ((exitcond2_reg_123 = ap_const_lv1_0) and (imgInTmp2_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_bdd_77 assign process. --
    ap_sig_bdd_77_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_77 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_50)
    begin
        if (ap_sig_bdd_50) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_2 assign process. --
    ap_sig_cseq_ST_st4_fsm_2_assign_proc : process(ap_sig_bdd_129)
    begin
        if (ap_sig_bdd_129) then 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_78_p2 <= "1" when (i6_reg_67 = ap_const_lv10_200) else "0";

    -- fftPyrOut_M_imag_V_read assign process. --
    fftPyrOut_M_imag_V_read_assign_proc : process(exitcond2_reg_123, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_64, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond2_reg_123 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            fftPyrOut_M_imag_V_read <= ap_const_logic_1;
        else 
            fftPyrOut_M_imag_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- fftPyrOut_M_real_V_read assign process. --
    fftPyrOut_M_real_V_read_assign_proc : process(exitcond2_reg_123, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_64, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond2_reg_123 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            fftPyrOut_M_real_V_read <= ap_const_logic_1;
        else 
            fftPyrOut_M_real_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_84_p2 <= std_logic_vector(unsigned(i6_reg_67) + unsigned(ap_const_lv10_1));
    imgInTmp2_din <= (((tmp_2_fu_100_p4 & ap_const_lv7_0) & tmp_fu_90_p4) & ap_const_lv7_0);

    -- imgInTmp2_write assign process. --
    imgInTmp2_write_assign_proc : process(exitcond2_reg_123, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_64, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond2_reg_123 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_64 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            imgInTmp2_write <= ap_const_logic_1;
        else 
            imgInTmp2_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_100_p4 <= fftPyrOut_M_imag_V_dout(9 downto 1);
    tmp_fu_90_p4 <= fftPyrOut_M_real_V_dout(9 downto 1);
end behav;
