-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pyrconstuct_top_Loop_3_proc_consFilters_V_rom is 
    generic(
             dwidth     : integer := 9; 
             awidth     : integer := 11; 
             mem_size    : integer := 1520
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pyrconstuct_top_Loop_3_proc_consFilters_V_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 128=> "000000000", 129 => "000000100", 130 => "000001000", 131 => "000001101", 
    132 => "000010001", 133 => "000010110", 134 => "000011010", 135 => "000011110", 
    136 => "000100011", 137 => "000100111", 138 => "000101011", 139 => "000101111", 
    140 => "000110011", 141 => "000110111", 142 => "000111011", 143 => "000111111", 
    144 => "001000011", 145 => "001000111", 146 => "001001011", 147 => "001001110", 
    148 => "001010010", 149 => "001010110", 150 => "001011010", 151 => "001011101", 
    152 => "001100001", 153 => "001100100", 154 => "001101000", 155 => "001101011", 
    156 => "001101110", 157 => "001110010", 158 => "001110101", 159 => "001111000", 
    160 => "001111100", 161 => "001111111", 162 => "010000010", 163 => "010000101", 
    164 => "010001000", 165 => "010001011", 166 => "010001110", 167 => "010010001", 
    168 => "010010011", 169 => "010010110", 170 => "010011001", 171 => "010011100", 
    172 => "010011110", 173 => "010100001", 174 => "010100100", 175 => "010100110", 
    176 => "010101001", 177 => "010101011", 178 => "010101101", 179 => "010110000", 
    180 => "010110010", 181 => "010110100", 182 => "010110111", 183 => "010111001", 
    184 => "010111011", 185 => "010111101", 186 => "010111111", 187 => "011000001", 
    188 => "011000011", 189 => "011000101", 190 => "011000111", 191 => "011001001", 
    192 => "011001011", 193 => "011001101", 194 => "011001111", 195 => "011010000", 
    196 => "011010010", 197 => "011010100", 198 => "011010101", 199 => "011010111", 
    200 => "011011000", 201 => "011011010", 202 => "011011011", 203 => "011011101", 
    204 => "011011110", 205 => "011100000", 206 => "011100001", 207 => "011100010", 
    208 => "011100100", 209 => "011100101", 210 => "011100110", 211 => "011100111", 
    212 => "011101000", 213 => "011101010", 214 => "011101011", 215 => "011101100", 
    216 => "011101101", 217 => "011101110", 218 => "011101111", 219 => "011110000", 
    220 to 221=> "011110001", 222 => "011110010", 223 => "011110011", 224 => "011110100", 
    225 to 226=> "011110101", 227 => "011110110", 228 to 229=> "011110111", 230 => "011111000", 
    231 to 232=> "011111001", 233 to 234=> "011111010", 235 to 236=> "011111011", 237 to 239=> "011111100", 
    240 to 242=> "011111101", 243 to 246=> "011111110", 247 to 255=> "011111111", 256 to 576=> "000000000", 
    577 => "000001000", 578 => "000010001", 579 => "000011010", 580 => "000100011", 
    581 => "000101011", 582 => "000110011", 583 => "000111011", 584 => "001000011", 
    585 => "001001011", 586 => "001010010", 587 => "001011010", 588 => "001100001", 
    589 => "001101000", 590 => "001101110", 591 => "001110101", 592 => "001111100", 
    593 => "010000010", 594 => "010001000", 595 => "010001110", 596 => "010010011", 
    597 => "010011001", 598 => "010011110", 599 => "010100100", 600 => "010101001", 
    601 => "010101101", 602 => "010110010", 603 => "010110111", 604 => "010111011", 
    605 => "010111111", 606 => "011000011", 607 => "011000111", 608 => "011001011", 
    609 => "011001111", 610 => "011010010", 611 => "011010101", 612 => "011011000", 
    613 => "011011011", 614 => "011011110", 615 => "011100001", 616 => "011100100", 
    617 => "011100110", 618 => "011101000", 619 => "011101011", 620 => "011101101", 
    621 => "011101111", 622 => "011110001", 623 => "011110010", 624 => "011110100", 
    625 => "011110101", 626 => "011110111", 627 => "011111000", 628 => "011111001", 
    629 => "011111010", 630 => "011111011", 631 => "011111100", 632 to 633=> "011111101", 
    634 to 635=> "011111110", 636 to 639=> "011111111", 640 => "100000000", 641 to 645=> "011111111", 
    646 to 647=> "011111110", 648 => "011111101", 649 to 650=> "011111100", 651 => "011111011", 
    652 => "011111010", 653 => "011111001", 654 => "011111000", 655 => "011110111", 
    656 => "011110110", 657 => "011110101", 658 => "011110100", 659 => "011110011", 
    660 => "011110010", 661 => "011110000", 662 => "011101111", 663 => "011101110", 
    664 => "011101100", 665 => "011101011", 666 => "011101001", 667 => "011101000", 
    668 => "011100110", 669 => "011100101", 670 => "011100011", 671 => "011100001", 
    672 => "011011111", 673 => "011011110", 674 => "011011100", 675 => "011011010", 
    676 => "011011000", 677 => "011010110", 678 => "011010100", 679 => "011010010", 
    680 => "011010000", 681 => "011001110", 682 => "011001100", 683 => "011001010", 
    684 => "011001000", 685 => "011000110", 686 => "011000100", 687 => "011000010", 
    688 => "011000000", 689 => "010111101", 690 => "010111011", 691 => "010111001", 
    692 => "010110111", 693 => "010110101", 694 => "010110010", 695 => "010110000", 
    696 => "010101110", 697 => "010101011", 698 => "010101001", 699 => "010100111", 
    700 => "010100100", 701 => "010100010", 702 => "010100000", 703 => "010011101", 
    704 => "010011011", 705 => "010011000", 706 => "010010110", 707 => "010010100", 
    708 => "010010001", 709 => "010001111", 710 => "010001100", 711 => "010001010", 
    712 => "010000111", 713 => "010000101", 714 => "010000010", 715 => "010000000", 
    716 => "001111101", 717 => "001111011", 718 => "001111001", 719 => "001110110", 
    720 => "001110100", 721 => "001110001", 722 => "001101111", 723 => "001101100", 
    724 => "001101010", 725 => "001100111", 726 => "001100101", 727 => "001100010", 
    728 => "001100000", 729 => "001011101", 730 => "001011011", 731 => "001011000", 
    732 => "001010110", 733 => "001010011", 734 => "001010001", 735 => "001001110", 
    736 => "001001100", 737 => "001001001", 738 => "001000111", 739 => "001000100", 
    740 => "001000010", 741 => "000111111", 742 => "000111101", 743 => "000111011", 
    744 => "000111000", 745 => "000110110", 746 => "000110011", 747 => "000110001", 
    748 => "000101110", 749 => "000101100", 750 => "000101010", 751 => "000100111", 
    752 => "000100101", 753 => "000100010", 754 => "000100000", 755 => "000011110", 
    756 => "000011011", 757 => "000011001", 758 => "000010111", 759 => "000010100", 
    760 => "000010010", 761 => "000010000", 762 => "000001101", 763 => "000001011", 
    764 => "000001001", 765 => "000000110", 766 => "000000100", 767 => "000000010", 
    768 to 1056=> "000000000", 1057 => "000010001", 1058 => "000100011", 1059 => "000110011", 
    1060 => "001000011", 1061 => "001010010", 1062 => "001100001", 1063 => "001101110", 
    1064 => "001111100", 1065 => "010001000", 1066 => "010010011", 1067 => "010011110", 
    1068 => "010101001", 1069 => "010110010", 1070 => "010111011", 1071 => "011000011", 
    1072 => "011001011", 1073 => "011010010", 1074 => "011011000", 1075 => "011011110", 
    1076 => "011100100", 1077 => "011101000", 1078 => "011101101", 1079 => "011110001", 
    1080 => "011110100", 1081 => "011110111", 1082 => "011111001", 1083 => "011111011", 
    1084 => "011111101", 1085 => "011111110", 1086 to 1087=> "011111111", 1088 => "100000000", 
    1089 to 1090=> "011111111", 1091 => "011111110", 1092 => "011111101", 1093 => "011111100", 
    1094 => "011111010", 1095 => "011111000", 1096 => "011110110", 1097 => "011110100", 
    1098 => "011110010", 1099 => "011101111", 1100 => "011101100", 1101 => "011101001", 
    1102 => "011100110", 1103 => "011100011", 1104 => "011011111", 1105 => "011011100", 
    1106 => "011011000", 1107 => "011010100", 1108 => "011010000", 1109 => "011001100", 
    1110 => "011001000", 1111 => "011000100", 1112 => "011000000", 1113 => "010111011", 
    1114 => "010110111", 1115 => "010110010", 1116 => "010101110", 1117 => "010101001", 
    1118 => "010100100", 1119 => "010100000", 1120 => "010011011", 1121 => "010010110", 
    1122 => "010010001", 1123 => "010001100", 1124 => "010000111", 1125 => "010000010", 
    1126 => "001111101", 1127 => "001111001", 1128 => "001110100", 1129 => "001101111", 
    1130 => "001101010", 1131 => "001100101", 1132 => "001100000", 1133 => "001011011", 
    1134 => "001010110", 1135 => "001010001", 1136 => "001001100", 1137 => "001000111", 
    1138 => "001000010", 1139 => "000111101", 1140 => "000111000", 1141 => "000110011", 
    1142 => "000101110", 1143 => "000101010", 1144 => "000100101", 1145 => "000100000", 
    1146 => "000011011", 1147 => "000010111", 1148 => "000010010", 1149 => "000001101", 
    1150 => "000001001", 1151 => "000000100", 1152 to 1296=> "000000000", 1297 => "000100011", 
    1298 => "001000011", 1299 => "001100001", 1300 => "001111100", 1301 => "010010011", 
    1302 => "010101001", 1303 => "010111011", 1304 => "011001011", 1305 => "011011000", 
    1306 => "011100100", 1307 => "011101101", 1308 => "011110100", 1309 => "011111001", 
    1310 => "011111101", 1311 => "011111111", 1312 => "100000000", 1313 => "011111111", 
    1314 => "011111101", 1315 => "011111010", 1316 => "011110110", 1317 => "011110010", 
    1318 => "011101100", 1319 => "011100110", 1320 => "011011111", 1321 => "011011000", 
    1322 => "011010000", 1323 => "011001000", 1324 => "011000000", 1325 => "010110111", 
    1326 => "010101110", 1327 => "010100100", 1328 => "010011011", 1329 => "010010001", 
    1330 => "010000111", 1331 => "001111101", 1332 => "001110100", 1333 => "001101010", 
    1334 => "001100000", 1335 => "001010110", 1336 => "001001100", 1337 => "001000010", 
    1338 => "000111000", 1339 => "000101110", 1340 => "000100101", 1341 => "000011011", 
    1342 => "000010010", 1343 => "000001001", 1344 to 1416=> "000000000", 1417 => "001000011", 
    1418 => "001111100", 1419 => "010101001", 1420 => "011001011", 1421 => "011100100", 
    1422 => "011110100", 1423 => "011111101", 1424 => "100000000", 1425 => "011111101", 
    1426 => "011110110", 1427 => "011101100", 1428 => "011011111", 1429 => "011010000", 
    1430 => "011000000", 1431 => "010101110", 1432 => "010011011", 1433 => "010000111", 
    1434 => "001110100", 1435 => "001100000", 1436 => "001001100", 1437 => "000111000", 
    1438 => "000100101", 1439 => "000010010", 1440 to 1476=> "000000000", 1477 => "001111100", 
    1478 => "011001011", 1479 => "011110100", 1480 => "100000000", 1481 => "011110110", 
    1482 => "011011111", 1483 => "011000000", 1484 => "010011011", 1485 => "001110100", 
    1486 => "001001100", 1487 => "000100101", 1488 to 1503=> "000000000", 1504 to 1508=> "100000000", 
    1509 => "011011111", 1510 => "010011011", 1511 => "001001100", 1512 => "000000000", 
    1513 => "001001100", 1514 => "010011011", 1515 => "011011111", 1516 to 1519=> "100000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity pyrconstuct_top_Loop_3_proc_consFilters_V is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 1520;
        AddressWidth : INTEGER := 11);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pyrconstuct_top_Loop_3_proc_consFilters_V is
    component pyrconstuct_top_Loop_3_proc_consFilters_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pyrconstuct_top_Loop_3_proc_consFilters_V_rom_U :  component pyrconstuct_top_Loop_3_proc_consFilters_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


