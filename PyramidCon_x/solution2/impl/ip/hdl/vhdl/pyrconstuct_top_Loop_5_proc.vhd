-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyrconstuct_top_Loop_5_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ifftPyrOut_dout : IN STD_LOGIC_VECTOR (47 downto 0);
    ifftPyrOut_empty_n : IN STD_LOGIC;
    ifftPyrOut_read : OUT STD_LOGIC;
    pyrFilOut_V_TDATA : OUT STD_LOGIC_VECTOR (39 downto 0);
    pyrFilOut_V_TVALID : OUT STD_LOGIC;
    pyrFilOut_V_TREADY : IN STD_LOGIC );
end;


architecture behav of pyrconstuct_top_Loop_5_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal i7_reg_73 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_181 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_45 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_sig_bdd_53 : BOOLEAN;
    signal ap_sig_ioackin_pyrFilOut_V_TREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal i_fu_90_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_bdd_70 : BOOLEAN;
    signal ap_reg_ioackin_pyrFilOut_V_TREADY : STD_LOGIC := '0';
    signal tmp_9_fu_96_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_3_fu_110_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_cast_fu_118_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_2_cast_fu_106_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_s_fu_122_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_2_fu_132_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_fu_146_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_cast_fu_154_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_4_cast_fu_142_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_2_fu_158_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Val2_6_cast_fu_128_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_164_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_172_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_166 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_187 : BOOLEAN;
    signal ap_sig_bdd_186 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_pyrFilOut_V_TREADY assign process. --
    ap_reg_ioackin_pyrFilOut_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_pyrFilOut_V_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_186) then
                    if (not(((ap_sig_bdd_53 or ((exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_pyrFilOut_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                        ap_reg_ioackin_pyrFilOut_V_TREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_187) then 
                        ap_reg_ioackin_pyrFilOut_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_53 or ((exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_pyrFilOut_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond_fu_84_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_70))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_53 or ((exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_pyrFilOut_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond_fu_84_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_70)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_53 or ((exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_pyrFilOut_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond_fu_84_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i7_reg_73 assign process. --
    i7_reg_73_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_53 or ((exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_pyrFilOut_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (exitcond_fu_84_p2 = ap_const_lv1_0))) then 
                i7_reg_73 <= i_fu_90_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_70))) then 
                i7_reg_73 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not(((ap_sig_bdd_53 or ((exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_pyrFilOut_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                exitcond_reg_181 <= exitcond_fu_84_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_fu_84_p2, exitcond_reg_181, ap_reg_ppiten_pp0_it0, ap_sig_bdd_53, ap_sig_ioackin_pyrFilOut_V_TREADY, ap_reg_ppiten_pp0_it1, ap_sig_bdd_70)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_70)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_53 or ((exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_pyrFilOut_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond_fu_84_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not(((ap_sig_bdd_53 or ((exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_pyrFilOut_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((exitcond_fu_84_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st4_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st4_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st4_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_166 assign process. --
    ap_sig_bdd_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_166 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_186 assign process. --
    ap_sig_bdd_186_assign_proc : process(exitcond_reg_181, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
                ap_sig_bdd_186 <= ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1));
    end process;


    -- ap_sig_bdd_187 assign process. --
    ap_sig_bdd_187_assign_proc : process(pyrFilOut_V_TREADY, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1)
    begin
                ap_sig_bdd_187 <= (not((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_logic_1 = pyrFilOut_V_TREADY));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_45 assign process. --
    ap_sig_bdd_45_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_45 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_53 assign process. --
    ap_sig_bdd_53_assign_proc : process(ifftPyrOut_empty_n, exitcond_reg_181)
    begin
                ap_sig_bdd_53 <= ((ifftPyrOut_empty_n = ap_const_logic_0) and (exitcond_reg_181 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_70 assign process. --
    ap_sig_bdd_70_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_70 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_45)
    begin
        if (ap_sig_bdd_45) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_2 assign process. --
    ap_sig_cseq_ST_st4_fsm_2_assign_proc : process(ap_sig_bdd_166)
    begin
        if (ap_sig_bdd_166) then 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_pyrFilOut_V_TREADY assign process. --
    ap_sig_ioackin_pyrFilOut_V_TREADY_assign_proc : process(pyrFilOut_V_TREADY, ap_reg_ioackin_pyrFilOut_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_pyrFilOut_V_TREADY)) then 
            ap_sig_ioackin_pyrFilOut_V_TREADY <= pyrFilOut_V_TREADY;
        else 
            ap_sig_ioackin_pyrFilOut_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_fu_84_p2 <= "1" when (i7_reg_73 = ap_const_lv10_200) else "0";
    i_fu_90_p2 <= std_logic_vector(unsigned(i7_reg_73) + unsigned(ap_const_lv10_1));

    -- ifftPyrOut_read assign process. --
    ifftPyrOut_read_assign_proc : process(exitcond_reg_181, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_53, ap_sig_ioackin_pyrFilOut_V_TREADY, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not(((ap_sig_bdd_53 or ((exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_pyrFilOut_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            ifftPyrOut_read <= ap_const_logic_1;
        else 
            ifftPyrOut_read <= ap_const_logic_0;
        end if; 
    end process;

        p_Val2_2_cast_fu_106_p1 <= std_logic_vector(resize(signed(tmp_9_fu_96_p4),15));

    p_Val2_2_fu_158_p2 <= std_logic_vector(unsigned(tmp_35_cast_fu_154_p1) + unsigned(p_Val2_4_cast_fu_142_p1));
        p_Val2_4_cast_fu_142_p1 <= std_logic_vector(resize(signed(tmp_2_fu_132_p4),15));

        p_Val2_6_cast_fu_128_p1 <= std_logic_vector(resize(signed(p_Val2_s_fu_122_p2),17));

    p_Val2_s_fu_122_p2 <= std_logic_vector(unsigned(tmp_32_cast_fu_118_p1) + unsigned(p_Val2_2_cast_fu_106_p1));
    pyrFilOut_V_TDATA <= std_logic_vector(resize(unsigned(tmp_1_fu_172_p1),40));

    -- pyrFilOut_V_TVALID assign process. --
    pyrFilOut_V_TVALID_assign_proc : process(exitcond_reg_181, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_53, ap_reg_ppiten_pp0_it1, ap_reg_ioackin_pyrFilOut_V_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_reg_181 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_53 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_logic_0 = ap_reg_ioackin_pyrFilOut_V_TREADY))) then 
            pyrFilOut_V_TVALID <= ap_const_logic_1;
        else 
            pyrFilOut_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

        tmp_1_fu_172_p1 <= std_logic_vector(resize(signed(tmp_fu_164_p3),34));

    tmp_2_fu_132_p4 <= ifftPyrOut_dout(47 downto 34);
    tmp_32_cast_fu_118_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_110_p3),15));
    tmp_35_cast_fu_154_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_146_p3),15));
    tmp_3_fu_110_p3 <= ifftPyrOut_dout(9 downto 9);
    tmp_4_fu_146_p3 <= ifftPyrOut_dout(33 downto 33);
    tmp_9_fu_96_p4 <= ifftPyrOut_dout(23 downto 10);
    tmp_fu_164_p3 <= (p_Val2_2_fu_158_p2 & p_Val2_6_cast_fu_128_p1);
end behav;
