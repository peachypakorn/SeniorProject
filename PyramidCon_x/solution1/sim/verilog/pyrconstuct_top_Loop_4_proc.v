// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pyrconstuct_top_Loop_4_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fftPyrOut_M_real_V_dout,
        fftPyrOut_M_real_V_empty_n,
        fftPyrOut_M_real_V_read,
        fftPyrOut_M_imag_V_dout,
        fftPyrOut_M_imag_V_empty_n,
        fftPyrOut_M_imag_V_read,
        imgInTmp2_din,
        imgInTmp2_full_n,
        imgInTmp2_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_pp0_stg0_fsm_1 = 3'b10;
parameter    ap_ST_st4_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv10_200 = 10'b1000000000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] fftPyrOut_M_real_V_dout;
input   fftPyrOut_M_real_V_empty_n;
output   fftPyrOut_M_real_V_read;
input  [23:0] fftPyrOut_M_imag_V_dout;
input   fftPyrOut_M_imag_V_empty_n;
output   fftPyrOut_M_imag_V_read;
output  [31:0] imgInTmp2_din;
input   imgInTmp2_full_n;
output   imgInTmp2_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fftPyrOut_M_real_V_read;
reg fftPyrOut_M_imag_V_read;
reg imgInTmp2_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
reg   [9:0] i4_reg_67;
wire   [0:0] exitcond1_fu_78_p2;
reg   [0:0] exitcond1_reg_123;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_1;
reg    ap_sig_bdd_50;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_sig_bdd_64;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [9:0] i_fu_84_p2;
reg    ap_sig_bdd_77;
wire   [8:0] tmp_2_fu_100_p4;
wire   [8:0] tmp_fu_90_p4;
reg    ap_sig_cseq_ST_st4_fsm_2;
reg    ap_sig_bdd_129;
reg   [2:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_2)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond1_fu_78_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_77)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond1_fu_78_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_77) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond1_fu_78_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & (exitcond1_fu_78_p2 == ap_const_lv1_0))) begin
        i4_reg_67 <= i_fu_84_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_77)) begin
        i4_reg_67 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        exitcond1_reg_123 <= exitcond1_fu_78_p2;
    end
end

always @ (ap_done_reg or ap_sig_cseq_ST_st4_fsm_2) begin
    if (((ap_const_logic_1 == ap_done_reg) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_2)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_50) begin
    if (ap_sig_bdd_50) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_22) begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_129) begin
    if (ap_sig_bdd_129) begin
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_2 = ap_const_logic_0;
    end
end

always @ (exitcond1_reg_123 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_64 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond1_reg_123 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        fftPyrOut_M_imag_V_read = ap_const_logic_1;
    end else begin
        fftPyrOut_M_imag_V_read = ap_const_logic_0;
    end
end

always @ (exitcond1_reg_123 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_64 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond1_reg_123 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        fftPyrOut_M_real_V_read = ap_const_logic_1;
    end else begin
        fftPyrOut_M_real_V_read = ap_const_logic_0;
    end
end

always @ (exitcond1_reg_123 or ap_sig_cseq_ST_pp0_stg0_fsm_1 or ap_sig_bdd_64 or ap_reg_ppiten_pp0_it1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_1) & (exitcond1_reg_123 == ap_const_lv1_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
        imgInTmp2_write = ap_const_logic_1;
    end else begin
        imgInTmp2_write = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or exitcond1_fu_78_p2 or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_64 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_77) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_77) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_pp0_stg0_fsm_1 : 
        begin
            if (~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond1_fu_78_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_64 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~(exitcond1_fu_78_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st4_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_1;
            end
        end
        ap_ST_st4_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_CS_fsm) begin
    ap_sig_bdd_129 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_50 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (fftPyrOut_M_real_V_empty_n or fftPyrOut_M_imag_V_empty_n or imgInTmp2_full_n or exitcond1_reg_123) begin
    ap_sig_bdd_64 = (((fftPyrOut_M_real_V_empty_n == ap_const_logic_0) & (exitcond1_reg_123 == ap_const_lv1_0)) | ((exitcond1_reg_123 == ap_const_lv1_0) & (fftPyrOut_M_imag_V_empty_n == ap_const_logic_0)) | ((exitcond1_reg_123 == ap_const_lv1_0) & (imgInTmp2_full_n == ap_const_logic_0)));
end


always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_77 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

assign exitcond1_fu_78_p2 = (i4_reg_67 == ap_const_lv10_200? 1'b1: 1'b0);

assign i_fu_84_p2 = (i4_reg_67 + ap_const_lv10_1);

assign imgInTmp2_din = {{{{tmp_2_fu_100_p4}, {ap_const_lv7_0}}, {tmp_fu_90_p4}}, {ap_const_lv7_0}};

assign tmp_2_fu_100_p4 = {{fftPyrOut_M_imag_V_dout[ap_const_lv32_9 : ap_const_lv32_1]}};

assign tmp_fu_90_p4 = {{fftPyrOut_M_real_V_dout[ap_const_lv32_9 : ap_const_lv32_1]}};


endmodule //pyrconstuct_top_Loop_4_proc

