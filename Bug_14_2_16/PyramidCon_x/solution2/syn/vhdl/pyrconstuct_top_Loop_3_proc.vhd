-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyrconstuct_top_Loop_3_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgOutTmpBlockRam_M_real_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    imgOutTmpBlockRam_M_real_V_ce0 : OUT STD_LOGIC;
    imgOutTmpBlockRam_M_real_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    imgOutTmpBlockRam_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    imgOutTmpBlockRam_M_imag_V_ce0 : OUT STD_LOGIC;
    imgOutTmpBlockRam_M_imag_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    fftPyrOut_M_real_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    fftPyrOut_M_real_V_full_n : IN STD_LOGIC;
    fftPyrOut_M_real_V_write : OUT STD_LOGIC;
    fftPyrOut_M_imag_V_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    fftPyrOut_M_imag_V_full_n : IN STD_LOGIC;
    fftPyrOut_M_imag_V_write : OUT STD_LOGIC );
end;


architecture behav of pyrconstuct_top_Loop_3_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st9_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_5F0 : STD_LOGIC_VECTOR (10 downto 0) := "10111110000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal limits_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal limits_ce0 : STD_LOGIC;
    signal limits_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal consFilters_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal consFilters_V_ce0 : STD_LOGIC;
    signal consFilters_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal l_0_i_reg_120 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_reg_132 : STD_LOGIC_VECTOR (31 downto 0);
    signal coefIdx_0_i_reg_144 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_i1_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i1_reg_299 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_76 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_i1_reg_299_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_98 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_i1_reg_299_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i1_reg_299_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i1_reg_299_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i1_reg_299_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal coefIdx_fu_161_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_reg_318 : STD_LOGIC_VECTOR (8 downto 0);
    signal idx_1_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_1_reg_323 : STD_LOGIC_VECTOR (31 downto 0);
    signal consFilters_V_load_reg_328 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_consFilters_V_load_reg_328_pp0_it2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_ppstg_consFilters_V_load_reg_328_pp0_it3 : STD_LOGIC_VECTOR (8 downto 0);
    signal l_fu_219_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_fu_225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_2_fu_242_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_2_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP2_V_cast_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_163 : BOOLEAN;
    signal l_0_i_phi_fu_124_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_phi_fu_136_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal nlimit_cast_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_cast_fu_215_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal half_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_285_ce : STD_LOGIC;
    signal grp_fu_292_ce : STD_LOGIC;
    signal ap_sig_cseq_ST_st9_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_284 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component pyrconstuct_top_mul_mul_9ns_24s_32_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pyrconstuct_top_Loop_3_proc_limits IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component pyrconstuct_top_Loop_3_proc_consFilters_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    limits_U : component pyrconstuct_top_Loop_3_proc_limits
    generic map (
        DataWidth => 10,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => limits_address0,
        ce0 => limits_ce0,
        q0 => limits_q0);

    consFilters_V_U : component pyrconstuct_top_Loop_3_proc_consFilters_V
    generic map (
        DataWidth => 9,
        AddressRange => 1520,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => consFilters_V_address0,
        ce0 => consFilters_V_ce0,
        q0 => consFilters_V_q0);

    pyrconstuct_top_mul_mul_9ns_24s_32_3_U7 : component pyrconstuct_top_mul_mul_9ns_24s_32_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 24,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_285_p0,
        din1 => imgOutTmpBlockRam_M_real_V_q0,
        ce => grp_fu_285_ce,
        dout => grp_fu_285_p2);

    pyrconstuct_top_mul_mul_9ns_24s_32_3_U8 : component pyrconstuct_top_mul_mul_9ns_24s_32_3
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 24,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        din1 => imgOutTmpBlockRam_M_imag_V_q0,
        ce => grp_fu_292_ce,
        dout => grp_fu_292_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((exitcond_i1_fu_155_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_163))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (exitcond_i1_fu_155_p2 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_163)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((exitcond_i1_fu_155_p2 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_163))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- coefIdx_0_i_reg_144 assign process. --
    coefIdx_0_i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_163))) then 
                coefIdx_0_i_reg_144 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (exitcond_i1_fu_155_p2 = ap_const_lv1_0))) then 
                coefIdx_0_i_reg_144 <= coefIdx_fu_161_p2;
            end if; 
        end if;
    end process;

    -- idx_reg_132 assign process. --
    idx_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_163))) then 
                idx_reg_132 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i1_reg_299_pp0_it1))) then 
                idx_reg_132 <= i_1_reg_338;
            end if; 
        end if;
    end process;

    -- l_0_i_reg_120 assign process. --
    l_0_i_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_163))) then 
                l_0_i_reg_120 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (exitcond_i1_reg_299 = ap_const_lv1_0))) then 
                l_0_i_reg_120 <= l_fu_219_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) then
                ap_reg_ppstg_consFilters_V_load_reg_328_pp0_it2 <= consFilters_V_load_reg_328;
                ap_reg_ppstg_consFilters_V_load_reg_328_pp0_it3 <= ap_reg_ppstg_consFilters_V_load_reg_328_pp0_it2;
                ap_reg_ppstg_exitcond_i1_reg_299_pp0_it2 <= ap_reg_ppstg_exitcond_i1_reg_299_pp0_it1;
                ap_reg_ppstg_exitcond_i1_reg_299_pp0_it3 <= ap_reg_ppstg_exitcond_i1_reg_299_pp0_it2;
                ap_reg_ppstg_exitcond_i1_reg_299_pp0_it4 <= ap_reg_ppstg_exitcond_i1_reg_299_pp0_it3;
                ap_reg_ppstg_exitcond_i1_reg_299_pp0_it5 <= ap_reg_ppstg_exitcond_i1_reg_299_pp0_it4;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then
                ap_reg_ppstg_exitcond_i1_reg_299_pp0_it1 <= exitcond_i1_reg_299;
                exitcond_i1_reg_299 <= exitcond_i1_fu_155_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (exitcond_i1_reg_299 = ap_const_lv1_0))) then
                consFilters_V_load_reg_328 <= consFilters_V_q0;
                idx_1_reg_323 <= idx_1_fu_197_p2;
                tmp_3_reg_318 <= limits_q0(9 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (exitcond_i1_reg_299 = ap_const_lv1_0))) then
                i_1_reg_338 <= i_1_fu_225_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i1_reg_299_pp0_it1))) then
                idx_2_reg_343 <= idx_2_fu_242_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_i1_fu_155_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it5, ap_sig_bdd_98, ap_reg_ppiten_pp0_it6, ap_sig_bdd_163)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_163)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((exitcond_i1_fu_155_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it5))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))) and not((exitcond_i1_fu_155_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st9_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    OP2_V_cast_fu_262_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_consFilters_V_load_reg_328_pp0_it3),32));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st9_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st9_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_163 assign process. --
    ap_sig_bdd_163_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_163 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_284 assign process. --
    ap_sig_bdd_284_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_284 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_76 assign process. --
    ap_sig_bdd_76_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_76 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_98 assign process. --
    ap_sig_bdd_98_assign_proc : process(fftPyrOut_M_real_V_full_n, fftPyrOut_M_imag_V_full_n, ap_reg_ppstg_exitcond_i1_reg_299_pp0_it5)
    begin
                ap_sig_bdd_98 <= (((fftPyrOut_M_real_V_full_n = ap_const_logic_0) and (ap_reg_ppstg_exitcond_i1_reg_299_pp0_it5 = ap_const_lv1_0)) or ((ap_reg_ppstg_exitcond_i1_reg_299_pp0_it5 = ap_const_lv1_0) and (fftPyrOut_M_imag_V_full_n = ap_const_logic_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_76)
    begin
        if (ap_sig_bdd_76) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_2 assign process. --
    ap_sig_cseq_ST_st9_fsm_2_assign_proc : process(ap_sig_bdd_284)
    begin
        if (ap_sig_bdd_284) then 
            ap_sig_cseq_ST_st9_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    coefIdx_fu_161_p2 <= std_logic_vector(unsigned(coefIdx_0_i_reg_144) + unsigned(ap_const_lv11_1));
    consFilters_V_address0 <= tmp_6_fu_172_p1(11 - 1 downto 0);

    -- consFilters_V_ce0 assign process. --
    consFilters_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_bdd_98, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
            consFilters_V_ce0 <= ap_const_logic_1;
        else 
            consFilters_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i1_fu_155_p2 <= "1" when (coefIdx_0_i_reg_144 = ap_const_lv11_5F0) else "0";
    fftPyrOut_M_imag_V_din <= grp_fu_292_p2(31 downto 8);

    -- fftPyrOut_M_imag_V_write assign process. --
    fftPyrOut_M_imag_V_write_assign_proc : process(ap_reg_ppstg_exitcond_i1_reg_299_pp0_it5, ap_sig_bdd_98, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_reg_ppstg_exitcond_i1_reg_299_pp0_it5 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
            fftPyrOut_M_imag_V_write <= ap_const_logic_1;
        else 
            fftPyrOut_M_imag_V_write <= ap_const_logic_0;
        end if; 
    end process;

    fftPyrOut_M_real_V_din <= grp_fu_285_p2(31 downto 8);

    -- fftPyrOut_M_real_V_write assign process. --
    fftPyrOut_M_real_V_write_assign_proc : process(ap_reg_ppstg_exitcond_i1_reg_299_pp0_it5, ap_sig_bdd_98, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_reg_ppstg_exitcond_i1_reg_299_pp0_it5 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
            fftPyrOut_M_real_V_write <= ap_const_logic_1;
        else 
            fftPyrOut_M_real_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_285_ce assign process. --
    grp_fu_285_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_98, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
            grp_fu_285_ce <= ap_const_logic_1;
        else 
            grp_fu_285_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_285_p0 <= OP2_V_cast_fu_262_p1(9 - 1 downto 0);

    -- grp_fu_292_ce assign process. --
    grp_fu_292_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_sig_bdd_98, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
            grp_fu_292_ce <= ap_const_logic_1;
        else 
            grp_fu_292_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_292_p0 <= OP2_V_cast_fu_262_p1(9 - 1 downto 0);
    half_fu_233_p1 <= std_logic_vector(resize(unsigned(tmp_3_reg_318),32));
    i_1_fu_225_p3 <= 
        ap_const_lv32_0 when (tmp_s_fu_209_p2(0) = '1') else 
        i_fu_203_p2;
    i_fu_203_p2 <= std_logic_vector(unsigned(idx_phi_fu_136_p4) + unsigned(ap_const_lv32_1));
    idx_1_fu_197_p2 <= std_logic_vector(unsigned(tmp_9_fu_191_p2) - unsigned(nlimit_cast_fu_177_p1));
    idx_2_fu_242_p3 <= 
        idx_reg_132 when (tmp_5_fu_236_p2(0) = '1') else 
        idx_1_reg_323;

    -- idx_phi_fu_136_p4 assign process. --
    idx_phi_fu_136_p4_assign_proc : process(idx_reg_132, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_exitcond_i1_reg_299_pp0_it1, i_1_reg_338)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i1_reg_299_pp0_it1))) then 
            idx_phi_fu_136_p4 <= i_1_reg_338;
        else 
            idx_phi_fu_136_p4 <= idx_reg_132;
        end if; 
    end process;

    imgOutTmpBlockRam_M_imag_V_address0 <= tmp_4_fu_249_p1(9 - 1 downto 0);

    -- imgOutTmpBlockRam_M_imag_V_ce0 assign process. --
    imgOutTmpBlockRam_M_imag_V_ce0_assign_proc : process(ap_reg_ppiten_pp0_it3, ap_sig_bdd_98, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
            imgOutTmpBlockRam_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            imgOutTmpBlockRam_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    imgOutTmpBlockRam_M_real_V_address0 <= tmp_4_fu_249_p1(9 - 1 downto 0);

    -- imgOutTmpBlockRam_M_real_V_ce0 assign process. --
    imgOutTmpBlockRam_M_real_V_ce0_assign_proc : process(ap_reg_ppiten_pp0_it3, ap_sig_bdd_98, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
            imgOutTmpBlockRam_M_real_V_ce0 <= ap_const_logic_1;
        else 
            imgOutTmpBlockRam_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- l_0_i_phi_fu_124_p4 assign process. --
    l_0_i_phi_fu_124_p4_assign_proc : process(l_0_i_reg_120, exitcond_i1_reg_299, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, l_fu_219_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_i1_reg_299 = ap_const_lv1_0))) then 
            l_0_i_phi_fu_124_p4 <= l_fu_219_p2;
        else 
            l_0_i_phi_fu_124_p4 <= l_0_i_reg_120;
        end if; 
    end process;

    l_fu_219_p2 <= std_logic_vector(unsigned(l_0_i_reg_120) + unsigned(tmp_17_cast_fu_215_p1));
    limits_address0 <= tmp_2_fu_167_p1(4 - 1 downto 0);

    -- limits_ce0 assign process. --
    limits_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_bdd_98, ap_reg_ppiten_pp0_it6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_98 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6))))) then 
            limits_ce0 <= ap_const_logic_1;
        else 
            limits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    nlimit_cast_fu_177_p1 <= std_logic_vector(resize(unsigned(limits_q0),32));
    tmp_17_cast_fu_215_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_209_p2),11));
    tmp_2_fu_167_p1 <= std_logic_vector(resize(unsigned(l_0_i_phi_fu_124_p4),64));
        tmp_4_fu_249_p1 <= std_logic_vector(resize(signed(idx_2_reg_343),64));

    tmp_5_fu_236_p2 <= "1" when (signed(idx_reg_132) < signed(half_fu_233_p1)) else "0";
    tmp_6_fu_172_p1 <= std_logic_vector(resize(unsigned(coefIdx_0_i_reg_144),64));
    tmp_9_fu_191_p2 <= std_logic_vector(unsigned(idx_phi_fu_136_p4) + unsigned(ap_const_lv32_200));
    tmp_s_fu_209_p2 <= "1" when (nlimit_cast_fu_177_p1 = i_fu_203_p2) else "0";
end behav;
