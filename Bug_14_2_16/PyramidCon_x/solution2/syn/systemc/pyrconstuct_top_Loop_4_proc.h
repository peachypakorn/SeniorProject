// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _pyrconstuct_top_Loop_4_proc_HH_
#define _pyrconstuct_top_Loop_4_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct pyrconstuct_top_Loop_4_proc : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<24> > fftPyrOut_M_real_V_dout;
    sc_in< sc_logic > fftPyrOut_M_real_V_empty_n;
    sc_out< sc_logic > fftPyrOut_M_real_V_read;
    sc_in< sc_lv<24> > fftPyrOut_M_imag_V_dout;
    sc_in< sc_logic > fftPyrOut_M_imag_V_empty_n;
    sc_out< sc_logic > fftPyrOut_M_imag_V_read;
    sc_out< sc_lv<32> > imgInTmp2_din;
    sc_in< sc_logic > imgInTmp2_full_n;
    sc_out< sc_logic > imgInTmp2_write;


    // Module declarations
    pyrconstuct_top_Loop_4_proc(sc_module_name name);
    SC_HAS_PROCESS(pyrconstuct_top_Loop_4_proc);

    ~pyrconstuct_top_Loop_4_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_22;
    sc_signal< sc_lv<10> > i6_reg_67;
    sc_signal< sc_lv<1> > exitcond2_fu_78_p2;
    sc_signal< sc_lv<1> > exitcond2_reg_123;
    sc_signal< sc_logic > ap_sig_cseq_ST_pp0_stg0_fsm_1;
    sc_signal< bool > ap_sig_bdd_50;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it0;
    sc_signal< bool > ap_sig_bdd_64;
    sc_signal< sc_logic > ap_reg_ppiten_pp0_it1;
    sc_signal< sc_lv<10> > i_fu_84_p2;
    sc_signal< bool > ap_sig_bdd_77;
    sc_signal< sc_lv<9> > tmp_1_fu_100_p4;
    sc_signal< sc_lv<9> > tmp_fu_90_p4;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_2;
    sc_signal< bool > ap_sig_bdd_129;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_pp0_stg0_fsm_1;
    static const sc_lv<3> ap_ST_st4_fsm_2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_200;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_129();
    void thread_ap_sig_bdd_22();
    void thread_ap_sig_bdd_50();
    void thread_ap_sig_bdd_64();
    void thread_ap_sig_bdd_77();
    void thread_ap_sig_cseq_ST_pp0_stg0_fsm_1();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st4_fsm_2();
    void thread_exitcond2_fu_78_p2();
    void thread_fftPyrOut_M_imag_V_read();
    void thread_fftPyrOut_M_real_V_read();
    void thread_i_fu_84_p2();
    void thread_imgInTmp2_din();
    void thread_imgInTmp2_write();
    void thread_tmp_1_fu_100_p4();
    void thread_tmp_fu_90_p4();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
