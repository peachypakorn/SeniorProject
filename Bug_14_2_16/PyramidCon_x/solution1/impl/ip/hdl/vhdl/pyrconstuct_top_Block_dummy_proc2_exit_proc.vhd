-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyrconstuct_top_Block_dummy_proc2_exit_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgOutTmpBlockRam_M_real_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    imgOutTmpBlockRam_M_real_V_ce0 : OUT STD_LOGIC;
    imgOutTmpBlockRam_M_real_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    imgOutTmpBlockRam_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    imgOutTmpBlockRam_M_imag_V_ce0 : OUT STD_LOGIC;
    imgOutTmpBlockRam_M_imag_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    fftPyrOut_M_real_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    fftPyrOut_M_real_V_ce0 : OUT STD_LOGIC;
    fftPyrOut_M_real_V_we0 : OUT STD_LOGIC;
    fftPyrOut_M_real_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    fftPyrOut_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    fftPyrOut_M_imag_V_ce0 : OUT STD_LOGIC;
    fftPyrOut_M_imag_V_we0 : OUT STD_LOGIC;
    fftPyrOut_M_imag_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of pyrconstuct_top_Block_dummy_proc2_exit_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_pp0_stg0_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal limits_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal limits_ce0 : STD_LOGIC;
    signal limits_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal consFilters_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal consFilters_V_ce0 : STD_LOGIC;
    signal consFilters_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal coefIdx_1_i_reg_159 : STD_LOGIC_VECTOR (11 downto 0);
    signal idx_reg_169 : STD_LOGIC_VECTOR (9 downto 0);
    signal l_fu_186_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_reg_339 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_81 : BOOLEAN;
    signal exitcond_i2_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_215_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_349 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_96 : BOOLEAN;
    signal coefIdx_fu_219_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal coefIdx_reg_354 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_cast_fu_231_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_cast_reg_359 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_239_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_364 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_111 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_reg_369_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_reg_369_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_254_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_388 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_8_reg_388_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_8_reg_388_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_289_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal imgOutTmpBlockRam_M_real_V_lo_reg_404 : STD_LOGIC_VECTOR (23 downto 0);
    signal imgOutTmpBlockRam_M_imag_V_lo_reg_409 : STD_LOGIC_VECTOR (23 downto 0);
    signal consFilters_V_load_reg_414 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_reg_419 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_reg_424 : STD_LOGIC_VECTOR (23 downto 0);
    signal coefIdx_0_i_reg_136 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_bdd_162 : BOOLEAN;
    signal ap_reg_phibuf_coefIdx_0_i_reg_136 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_nseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_172 : BOOLEAN;
    signal l_0_i_reg_148 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_205_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal nlimit_cast_fu_197_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_201_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_225_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_235_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_245_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_1_fu_265_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_i_fu_270_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_s_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_322_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal OP2_V_cast_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_329_p1 : STD_LOGIC_VECTOR (8 downto 0);

    component pyrconstuct_top_mul_mul_24s_9ns_32_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pyrconstuct_top_Block_dummy_proc2_exit_proc_limits IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component pyrconstuct_top_Block_dummy_proc2_exit_proc_consFilters_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    limits_U : component pyrconstuct_top_Block_dummy_proc2_exit_proc_limits
    generic map (
        DataWidth => 10,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => limits_address0,
        ce0 => limits_ce0,
        q0 => limits_q0);

    consFilters_V_U : component pyrconstuct_top_Block_dummy_proc2_exit_proc_consFilters_V
    generic map (
        DataWidth => 9,
        AddressRange => 1520,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => consFilters_V_address0,
        ce0 => consFilters_V_ce0,
        q0 => consFilters_V_q0);

    pyrconstuct_top_mul_mul_24s_9ns_32_1_U8 : component pyrconstuct_top_mul_mul_24s_9ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 9,
        dout_WIDTH => 32)
    port map (
        din0 => imgOutTmpBlockRam_M_real_V_lo_reg_404,
        din1 => p_Val2_s_fu_322_p1,
        dout => p_Val2_s_fu_322_p2);

    pyrconstuct_top_mul_mul_24s_9ns_32_1_U9 : component pyrconstuct_top_mul_mul_24s_9ns_32_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 24,
        din1_WIDTH => 9,
        dout_WIDTH => 32)
    port map (
        din0 => imgOutTmpBlockRam_M_imag_V_lo_reg_409,
        din1 => p_Val2_2_fu_329_p1,
        dout => p_Val2_2_fu_329_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_i2_fu_180_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_249_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_fu_249_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_249_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- coefIdx_0_i_reg_136 assign process. --
    coefIdx_0_i_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_249_p2)) and (ap_const_logic_1 = ap_sig_nseq_ST_st2_fsm_1))) then 
                coefIdx_0_i_reg_136 <= coefIdx_reg_354;
            elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_logic_1 = ap_sig_nseq_ST_st2_fsm_1))) then 
                coefIdx_0_i_reg_136 <= ap_reg_phibuf_coefIdx_0_i_reg_136;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_162))) then 
                coefIdx_0_i_reg_136 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    -- coefIdx_1_i_reg_159 assign process. --
    coefIdx_1_i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_fu_249_p2))) then 
                coefIdx_1_i_reg_159 <= tmp_12_fu_289_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                coefIdx_1_i_reg_159 <= coefIdx_0_i_reg_136;
            end if; 
        end if;
    end process;

    -- idx_reg_169 assign process. --
    idx_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_fu_249_p2))) then 
                idx_reg_169 <= i_fu_254_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                idx_reg_169 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- l_0_i_reg_148 assign process. --
    l_0_i_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_249_p2)))) then 
                l_0_i_reg_148 <= l_reg_339;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_162))) then 
                l_0_i_reg_148 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_249_p2)))) then
                ap_reg_phibuf_coefIdx_0_i_reg_136 <= coefIdx_reg_354;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3)) then
                ap_reg_ppstg_exitcond_reg_369_pp0_it1 <= exitcond_reg_369;
                    ap_reg_ppstg_tmp_8_reg_388_pp0_it1(11 downto 0) <= tmp_8_reg_388(11 downto 0);
                exitcond_reg_369 <= exitcond_fu_249_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_exitcond_reg_369_pp0_it2 <= ap_reg_ppstg_exitcond_reg_369_pp0_it1;
                    ap_reg_ppstg_tmp_8_reg_388_pp0_it2(11 downto 0) <= ap_reg_ppstg_tmp_8_reg_388_pp0_it1(11 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                coefIdx_reg_354 <= coefIdx_fu_219_p2;
                tmp_11_reg_364 <= tmp_11_fu_239_p2;
                    tmp_13_cast_reg_359(8 downto 0) <= tmp_13_cast_fu_231_p1(8 downto 0);
                    tmp_reg_349(8 downto 0) <= tmp_fu_215_p1(8 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_reg_369))) then
                consFilters_V_load_reg_414 <= consFilters_V_q0;
                imgOutTmpBlockRam_M_imag_V_lo_reg_409 <= imgOutTmpBlockRam_M_imag_V_q0;
                imgOutTmpBlockRam_M_real_V_lo_reg_404 <= imgOutTmpBlockRam_M_real_V_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                l_reg_339 <= l_fu_186_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_369_pp0_it1)) then
                tmp_10_reg_424 <= p_Val2_2_fu_329_p2(31 downto 8);
                tmp_2_reg_419 <= p_Val2_s_fu_322_p2(31 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_lv1_0 = exitcond_fu_249_p2))) then
                    tmp_8_reg_388(11 downto 0) <= tmp_8_fu_284_p1(11 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_349(9) <= '0';
    tmp_13_cast_reg_359(9) <= '0';
    tmp_8_reg_388(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_8_reg_388_pp0_it1(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_8_reg_388_pp0_it2(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_i2_fu_180_p2, exitcond_fu_249_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp0_it3, ap_sig_bdd_162)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_162)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_i2_fu_180_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
            when ap_ST_pp0_stg0_fsm_3 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_249_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_3;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_249_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    OP2_V_cast_fu_301_p1 <= std_logic_vector(resize(unsigned(consFilters_V_load_reg_414),32));

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1, exitcond_i2_fu_180_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_i2_fu_180_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_i2_fu_180_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_i2_fu_180_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_111 assign process. --
    ap_sig_bdd_111_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_111 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_162 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_172 assign process. --
    ap_sig_bdd_172_assign_proc : process(ap_NS_fsm)
    begin
                ap_sig_bdd_172 <= (ap_const_lv1_1 = ap_NS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_81 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_96 assign process. --
    ap_sig_bdd_96_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_96 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_3_assign_proc : process(ap_sig_bdd_111)
    begin
        if (ap_sig_bdd_111) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_81)
    begin
        if (ap_sig_bdd_81) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_96)
    begin
        if (ap_sig_bdd_96) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_nseq_ST_st2_fsm_1 assign process. --
    ap_sig_nseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_172)
    begin
        if (ap_sig_bdd_172) then 
            ap_sig_nseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_nseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    coefIdx_fu_219_p2 <= std_logic_vector(unsigned(coefIdx_0_i_reg_136) + unsigned(nlimit_cast_fu_197_p1));
    consFilters_V_address0 <= tmp_8_fu_284_p1(11 - 1 downto 0);

    -- consFilters_V_ce0 assign process. --
    consFilters_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            consFilters_V_ce0 <= ap_const_logic_1;
        else 
            consFilters_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_249_p2 <= "1" when (tmp_14_fu_245_p1 = tmp_11_reg_364) else "0";
    exitcond_i2_fu_180_p2 <= "1" when (l_0_i_reg_148 = ap_const_lv3_7) else "0";
    fftPyrOut_M_imag_V_address0 <= ap_reg_ppstg_tmp_8_reg_388_pp0_it2(11 - 1 downto 0);

    -- fftPyrOut_M_imag_V_ce0 assign process. --
    fftPyrOut_M_imag_V_ce0_assign_proc : process(ap_reg_ppiten_pp0_it3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) then 
            fftPyrOut_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            fftPyrOut_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fftPyrOut_M_imag_V_d0 <= tmp_10_reg_424;

    -- fftPyrOut_M_imag_V_we0 assign process. --
    fftPyrOut_M_imag_V_we0_assign_proc : process(ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_reg_369_pp0_it2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_369_pp0_it2)))) then 
            fftPyrOut_M_imag_V_we0 <= ap_const_logic_1;
        else 
            fftPyrOut_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fftPyrOut_M_real_V_address0 <= ap_reg_ppstg_tmp_8_reg_388_pp0_it2(11 - 1 downto 0);

    -- fftPyrOut_M_real_V_ce0 assign process. --
    fftPyrOut_M_real_V_ce0_assign_proc : process(ap_reg_ppiten_pp0_it3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) then 
            fftPyrOut_M_real_V_ce0 <= ap_const_logic_1;
        else 
            fftPyrOut_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fftPyrOut_M_real_V_d0 <= tmp_2_reg_419;

    -- fftPyrOut_M_real_V_we0 assign process. --
    fftPyrOut_M_real_V_we0_assign_proc : process(ap_reg_ppiten_pp0_it3, ap_reg_ppstg_exitcond_reg_369_pp0_it2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_reg_369_pp0_it2)))) then 
            fftPyrOut_M_real_V_we0 <= ap_const_logic_1;
        else 
            fftPyrOut_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_0_i_fu_270_p3 <= 
        idx_reg_169 when (tmp_6_fu_260_p2(0) = '1') else 
        idx_1_fu_265_p2;
    i_fu_254_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(idx_reg_169));
    idx_1_fu_265_p2 <= std_logic_vector(unsigned(idx_reg_169) + unsigned(tmp_13_cast_reg_359));
    imgOutTmpBlockRam_M_imag_V_address0 <= tmp_7_fu_278_p1(10 - 1 downto 0);

    -- imgOutTmpBlockRam_M_imag_V_ce0 assign process. --
    imgOutTmpBlockRam_M_imag_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            imgOutTmpBlockRam_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            imgOutTmpBlockRam_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    imgOutTmpBlockRam_M_real_V_address0 <= tmp_7_fu_278_p1(10 - 1 downto 0);

    -- imgOutTmpBlockRam_M_real_V_ce0 assign process. --
    imgOutTmpBlockRam_M_real_V_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_3, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_3) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            imgOutTmpBlockRam_M_real_V_ce0 <= ap_const_logic_1;
        else 
            imgOutTmpBlockRam_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_fu_186_p2 <= std_logic_vector(unsigned(l_0_i_reg_148) + unsigned(ap_const_lv3_1));
    limits_address0 <= tmp_3_fu_192_p1(3 - 1 downto 0);

    -- limits_ce0 assign process. --
    limits_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            limits_ce0 <= ap_const_logic_1;
        else 
            limits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    nlimit_cast_fu_197_p1 <= std_logic_vector(resize(unsigned(limits_q0),12));
    p_Val2_2_fu_329_p1 <= OP2_V_cast_fu_301_p1(9 - 1 downto 0);
    p_Val2_s_fu_322_p1 <= OP2_V_cast_fu_301_p1(9 - 1 downto 0);
    tmp_11_fu_239_p2 <= std_logic_vector(unsigned(limits_q0) + unsigned(tmp_13_fu_235_p1));
    tmp_12_fu_289_p2 <= std_logic_vector(unsigned(coefIdx_1_i_reg_159) + unsigned(ap_const_lv12_1));
    tmp_13_cast_fu_231_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_225_p2),10));
    tmp_13_fu_235_p1 <= coefIdx_0_i_reg_136(10 - 1 downto 0);
    tmp_14_fu_245_p1 <= coefIdx_1_i_reg_159(10 - 1 downto 0);
    tmp_3_fu_192_p1 <= std_logic_vector(resize(unsigned(l_0_i_reg_148),64));
    tmp_4_fu_205_p4 <= limits_q0(9 downto 1);
    tmp_6_fu_260_p2 <= "1" when (unsigned(idx_reg_169) < unsigned(tmp_reg_349)) else "0";
    tmp_7_fu_278_p1 <= std_logic_vector(resize(unsigned(i_0_i_fu_270_p3),64));
    tmp_8_fu_284_p1 <= std_logic_vector(resize(unsigned(coefIdx_1_i_reg_159),64));
    tmp_9_fu_201_p1 <= limits_q0(9 - 1 downto 0);
    tmp_fu_215_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_205_p4),10));
    tmp_s_fu_225_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_9_fu_201_p1));
end behav;
