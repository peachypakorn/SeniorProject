// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pyrconstuct_top_Loop_2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        imgOutTmpFFTStream_address0,
        imgOutTmpFFTStream_ce0,
        imgOutTmpFFTStream_q0,
        imgOutTmpBlockRam_M_real_V_address0,
        imgOutTmpBlockRam_M_real_V_ce0,
        imgOutTmpBlockRam_M_real_V_we0,
        imgOutTmpBlockRam_M_real_V_d0,
        imgOutTmpBlockRam_M_imag_V_address0,
        imgOutTmpBlockRam_M_imag_V_ce0,
        imgOutTmpBlockRam_M_imag_V_we0,
        imgOutTmpBlockRam_M_imag_V_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv10_200 = 10'b1000000000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] imgOutTmpFFTStream_address0;
output   imgOutTmpFFTStream_ce0;
input  [47:0] imgOutTmpFFTStream_q0;
output  [9:0] imgOutTmpBlockRam_M_real_V_address0;
output   imgOutTmpBlockRam_M_real_V_ce0;
output   imgOutTmpBlockRam_M_real_V_we0;
output  [23:0] imgOutTmpBlockRam_M_real_V_d0;
output  [9:0] imgOutTmpBlockRam_M_imag_V_address0;
output   imgOutTmpBlockRam_M_imag_V_ce0;
output   imgOutTmpBlockRam_M_imag_V_we0;
output  [23:0] imgOutTmpBlockRam_M_imag_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgOutTmpFFTStream_ce0;
reg imgOutTmpBlockRam_M_real_V_ce0;
reg imgOutTmpBlockRam_M_real_V_we0;
reg imgOutTmpBlockRam_M_imag_V_ce0;
reg imgOutTmpBlockRam_M_imag_V_we0;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [9:0] i_fu_85_p2;
reg   [9:0] i_reg_115;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_56;
wire   [63:0] tmp_2_fu_91_p1;
reg   [63:0] tmp_2_reg_120;
wire   [0:0] exitcond_i1_fu_79_p2;
reg   [9:0] i_0_i1_reg_68;
reg    ap_sig_bdd_72;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_80;
reg   [2:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_i1_fu_79_p2 == ap_const_lv1_0))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_0_i1_reg_68 <= i_reg_115;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_72)) begin
        i_0_i1_reg_68 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_reg_115 <= i_fu_85_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_i1_fu_79_p2 == ap_const_lv1_0))) begin
        tmp_2_reg_120[9 : 0] <= tmp_2_fu_91_p1[9 : 0];
    end
end

always @ (ap_done_reg or ap_sig_cseq_ST_st2_fsm_1 or exitcond_i1_fu_79_p2) begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_i1_fu_79_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_i1_fu_79_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_i1_fu_79_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_22) begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_56) begin
    if (ap_sig_bdd_56) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_80) begin
    if (ap_sig_bdd_80) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        imgOutTmpBlockRam_M_imag_V_ce0 = ap_const_logic_1;
    end else begin
        imgOutTmpBlockRam_M_imag_V_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        imgOutTmpBlockRam_M_imag_V_we0 = ap_const_logic_1;
    end else begin
        imgOutTmpBlockRam_M_imag_V_we0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        imgOutTmpBlockRam_M_real_V_ce0 = ap_const_logic_1;
    end else begin
        imgOutTmpBlockRam_M_real_V_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st3_fsm_2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        imgOutTmpBlockRam_M_real_V_we0 = ap_const_logic_1;
    end else begin
        imgOutTmpBlockRam_M_real_V_we0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        imgOutTmpFFTStream_ce0 = ap_const_logic_1;
    end else begin
        imgOutTmpFFTStream_ce0 = ap_const_logic_0;
    end
end
always @ (ap_CS_fsm or exitcond_i1_fu_79_p2 or ap_sig_bdd_72) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_72) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond_i1_fu_79_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_CS_fsm) begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_56 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_start or ap_done_reg) begin
    ap_sig_bdd_72 = ((ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_80 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign exitcond_i1_fu_79_p2 = (i_0_i1_reg_68 == ap_const_lv10_200? 1'b1: 1'b0);

assign i_fu_85_p2 = (i_0_i1_reg_68 + ap_const_lv10_1);

assign imgOutTmpBlockRam_M_imag_V_address0 = tmp_2_reg_120;

assign imgOutTmpBlockRam_M_imag_V_d0 = {{imgOutTmpFFTStream_q0[ap_const_lv32_2F : ap_const_lv32_18]}};

assign imgOutTmpBlockRam_M_real_V_address0 = tmp_2_reg_120;

assign imgOutTmpBlockRam_M_real_V_d0 = imgOutTmpFFTStream_q0[23:0];

assign imgOutTmpFFTStream_address0 = tmp_2_fu_91_p1;

assign tmp_2_fu_91_p1 = i_0_i1_reg_68;
always @ (posedge ap_clk) begin
    tmp_2_reg_120[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end



endmodule //pyrconstuct_top_Loop_2_proc

