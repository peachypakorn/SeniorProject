-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pyrconstuct_top_Loop_2_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgOutTmpFFTStream_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    imgOutTmpFFTStream_ce0 : OUT STD_LOGIC;
    imgOutTmpFFTStream_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    imgOutTmpBlockRam_M_real_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    imgOutTmpBlockRam_M_real_V_ce0 : OUT STD_LOGIC;
    imgOutTmpBlockRam_M_real_V_we0 : OUT STD_LOGIC;
    imgOutTmpBlockRam_M_real_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    imgOutTmpBlockRam_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    imgOutTmpBlockRam_M_imag_V_ce0 : OUT STD_LOGIC;
    imgOutTmpBlockRam_M_imag_V_we0 : OUT STD_LOGIC;
    imgOutTmpBlockRam_M_imag_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of pyrconstuct_top_Loop_2_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal i_fu_85_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_115 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_56 : BOOLEAN;
    signal tmp_2_fu_91_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_120 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i1_fu_79_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i1_reg_68 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_bdd_72 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_80 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_i1_fu_79_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- i_0_i1_reg_68 assign process. --
    i_0_i1_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                i_0_i1_reg_68 <= i_reg_115;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_72))) then 
                i_0_i1_reg_68 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_reg_115 <= i_fu_85_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_i1_fu_79_p2 = ap_const_lv1_0))) then
                    tmp_2_reg_120(9 downto 0) <= tmp_2_fu_91_p1(9 downto 0);
            end if;
        end if;
    end process;
    tmp_2_reg_120(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_i1_fu_79_p2, ap_sig_bdd_72)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_72)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_i1_fu_79_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1, exitcond_i1_fu_79_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_i1_fu_79_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_i1_fu_79_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_i1_fu_79_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_56 assign process. --
    ap_sig_bdd_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_56 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_72 assign process. --
    ap_sig_bdd_72_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_72 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_80 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_56)
    begin
        if (ap_sig_bdd_56) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_80)
    begin
        if (ap_sig_bdd_80) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i1_fu_79_p2 <= "1" when (i_0_i1_reg_68 = ap_const_lv10_200) else "0";
    i_fu_85_p2 <= std_logic_vector(unsigned(i_0_i1_reg_68) + unsigned(ap_const_lv10_1));
    imgOutTmpBlockRam_M_imag_V_address0 <= tmp_2_reg_120(10 - 1 downto 0);

    -- imgOutTmpBlockRam_M_imag_V_ce0 assign process. --
    imgOutTmpBlockRam_M_imag_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            imgOutTmpBlockRam_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            imgOutTmpBlockRam_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    imgOutTmpBlockRam_M_imag_V_d0 <= imgOutTmpFFTStream_q0(47 downto 24);

    -- imgOutTmpBlockRam_M_imag_V_we0 assign process. --
    imgOutTmpBlockRam_M_imag_V_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            imgOutTmpBlockRam_M_imag_V_we0 <= ap_const_logic_1;
        else 
            imgOutTmpBlockRam_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    imgOutTmpBlockRam_M_real_V_address0 <= tmp_2_reg_120(10 - 1 downto 0);

    -- imgOutTmpBlockRam_M_real_V_ce0 assign process. --
    imgOutTmpBlockRam_M_real_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            imgOutTmpBlockRam_M_real_V_ce0 <= ap_const_logic_1;
        else 
            imgOutTmpBlockRam_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    imgOutTmpBlockRam_M_real_V_d0 <= imgOutTmpFFTStream_q0(24 - 1 downto 0);

    -- imgOutTmpBlockRam_M_real_V_we0 assign process. --
    imgOutTmpBlockRam_M_real_V_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2))) then 
            imgOutTmpBlockRam_M_real_V_we0 <= ap_const_logic_1;
        else 
            imgOutTmpBlockRam_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    imgOutTmpFFTStream_address0 <= tmp_2_fu_91_p1(10 - 1 downto 0);

    -- imgOutTmpFFTStream_ce0 assign process. --
    imgOutTmpFFTStream_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            imgOutTmpFFTStream_ce0 <= ap_const_logic_1;
        else 
            imgOutTmpFFTStream_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_91_p1 <= std_logic_vector(resize(unsigned(i_0_i1_reg_68),64));
end behav;
