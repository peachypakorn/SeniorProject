// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "sig"
#define AUTOTB_TVIN_sig  "../tv/cdatafile/c.cmpy_complex_top.autotvin_sig.dat"
// wrapc file define: "sigRef"
#define AUTOTB_TVIN_sigRef  "../tv/cdatafile/c.cmpy_complex_top.autotvin_sigRef.dat"
// wrapc file define: "prealign_V"
#define AUTOTB_TVIN_prealign_V  "../tv/cdatafile/c.cmpy_complex_top.autotvin_prealign_V.dat"
// wrapc file define: "cmp"
#define AUTOTB_TVOUT_cmp  "../tv/cdatafile/c.cmpy_complex_top.autotvout_cmp.dat"
#define AUTOTB_TVIN_cmp  "../tv/cdatafile/c.cmpy_complex_top.autotvin_cmp.dat"
// wrapc file define: "nL"
#define AUTOTB_TVIN_nL  "../tv/cdatafile/c.cmpy_complex_top.autotvin_nL.dat"
// wrapc file define: "factor_V"
#define AUTOTB_TVIN_factor_V  "../tv/cdatafile/c.cmpy_complex_top.autotvin_factor_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "cmp"
#define AUTOTB_TVOUT_PC_cmp  "../tv/rtldatafile/rtl.cmpy_complex_top.autotvout_cmp.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			sig_depth = 0;
			sigRef_depth = 0;
			prealign_V_depth = 0;
			cmp_depth = 0;
			nL_depth = 0;
			factor_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{sig " << sig_depth << "}\n";
			total_list << "{sigRef " << sigRef_depth << "}\n";
			total_list << "{prealign_V " << prealign_V_depth << "}\n";
			total_list << "{cmp " << cmp_depth << "}\n";
			total_list << "{nL " << nL_depth << "}\n";
			total_list << "{factor_V " << factor_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int sig_depth;
		int sigRef_depth;
		int prealign_V_depth;
		int cmp_depth;
		int nL_depth;
		int factor_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define cmpy_complex_top AESL_ORIG_DUT_cmpy_complex_top
extern void cmpy_complex_top (
const std::complex<ap_fixed<10, 1, (ap_q_mode) 5, (ap_o_mode)3, 0> > sig[1024],
const std::complex<ap_fixed<10, 1, (ap_q_mode) 5, (ap_o_mode)3, 0> > sigRef[2048],
const ap_fixed<18, 12, (ap_q_mode) 5, (ap_o_mode)3, 0> prealign[1024],
std::complex<ap_fixed<20, 2, (ap_q_mode) 0, (ap_o_mode)3, 0> > cmp[1024],
const int nL,
const int nLExp,
const int nLen,
const ap_fixed<10, 1, (ap_q_mode) 5, (ap_o_mode)3, 0> factor);
#undef cmpy_complex_top

void cmpy_complex_top (
const std::complex<ap_fixed<10, 1, (ap_q_mode) 5, (ap_o_mode)3, 0> > sig[1024],
const std::complex<ap_fixed<10, 1, (ap_q_mode) 5, (ap_o_mode)3, 0> > sigRef[2048],
const ap_fixed<18, 12, (ap_q_mode) 5, (ap_o_mode)3, 0> prealign[1024],
std::complex<ap_fixed<20, 2, (ap_q_mode) 0, (ap_o_mode)3, 0> > cmp[1024],
const int nL,
const int nLExp,
const int nLen,
const ap_fixed<10, 1, (ap_q_mode) 5, (ap_o_mode)3, 0> factor)
{
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "cmp"
		aesl_fh.read(AUTOTB_TVOUT_PC_cmp, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_cmp, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_cmp, AESL_token); // data

			sc_bv<40> *cmp_pc_buffer = new sc_bv<40>[1024];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'cmp', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'cmp', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					cmp_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_cmp, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_cmp))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: cmp
				{
					// bitslice(19, 0)
					// {
						// celement: cmp._M_real.V(19, 0)
						// {
							sc_lv<20>* cmp__M_real_V_lv0_0_1023_1 = new sc_lv<20>[1024];
						// }
					// }
					// bitslice(39, 20)
					// {
						// celement: cmp._M_imag.V(19, 0)
						// {
							sc_lv<20>* cmp__M_imag_V_lv0_0_1023_1 = new sc_lv<20>[1024];
						// }
					// }

					// bitslice(19, 0)
					{
						int hls_map_index = 0;
						// celement: cmp._M_real.V(19, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								if (&(cmp[0].real()) != NULL) // check the null address if the c port is array or others
								{
									cmp__M_real_V_lv0_0_1023_1[hls_map_index++].range(19, 0) = sc_bv<20>(cmp_pc_buffer[hls_map_index].range(19, 0));
								}
							}
						}
					}
					// bitslice(39, 20)
					{
						int hls_map_index = 0;
						// celement: cmp._M_imag.V(19, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								if (&(cmp[0].imag()) != NULL) // check the null address if the c port is array or others
								{
									cmp__M_imag_V_lv0_0_1023_1[hls_map_index++].range(19, 0) = sc_bv<20>(cmp_pc_buffer[hls_map_index].range(39, 20));
								}
							}
						}
					}

					// bitslice(19, 0)
					{
						int hls_map_index = 0;
						// celement: cmp._M_real.V(19, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : cmp[i_0].real()
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : cmp[0].real()
								// output_left_conversion : (cmp[i_0].real()).range()
								// output_type_conversion : (cmp__M_real_V_lv0_0_1023_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(cmp[0].real()) != NULL) // check the null address if the c port is array or others
								{
									(cmp[i_0].real()).range() = (cmp__M_real_V_lv0_0_1023_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
					// bitslice(39, 20)
					{
						int hls_map_index = 0;
						// celement: cmp._M_imag.V(19, 0)
						{
							// carray: (0) => (1023) @ (1)
							for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : cmp[i_0].imag()
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : cmp[0].imag()
								// output_left_conversion : (cmp[i_0].imag()).range()
								// output_type_conversion : (cmp__M_imag_V_lv0_0_1023_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(cmp[0].imag()) != NULL) // check the null address if the c port is array or others
								{
									(cmp[i_0].imag()).range() = (cmp__M_imag_V_lv0_0_1023_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] cmp_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "sig"
		char* tvin_sig = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sig);

		// "sigRef"
		char* tvin_sigRef = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sigRef);

		// "prealign_V"
		char* tvin_prealign_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_prealign_V);

		// "cmp"
		char* tvin_cmp = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_cmp);
		char* tvout_cmp = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_cmp);

		// "nL"
		char* tvin_nL = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_nL);

		// "factor_V"
		char* tvin_factor_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_factor_V);

		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_sig, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_sig, tvin_sig);

		sc_bv<24>* sig_tvin_wrapc_buffer = new sc_bv<24>[1024];

		// RTL Name: sig
		{
			// bitslice(9, 0)
			{
				int hls_map_index = 0;
				// celement: sig._M_real.V(9, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : sig[i_0].real()
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : sig[0].real()
						// regulate_c_name       : sig__M_real_V
						// input_type_conversion : (sig[i_0].real()).range().to_string(SC_BIN).c_str()
						if (&(sig[0].real()) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<10> sig__M_real_V_tmp_mem;
							sig__M_real_V_tmp_mem = (sig[i_0].real()).range().to_string(SC_BIN).c_str();
							sig_tvin_wrapc_buffer[hls_map_index++].range(9, 0) = sig__M_real_V_tmp_mem.range(9, 0);
						}
					}
				}
			}
			// bitslice(19, 10)
			{
				int hls_map_index = 0;
				// celement: sig._M_imag.V(9, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : sig[i_0].imag()
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : sig[0].imag()
						// regulate_c_name       : sig__M_imag_V
						// input_type_conversion : (sig[i_0].imag()).range().to_string(SC_BIN).c_str()
						if (&(sig[0].imag()) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<10> sig__M_imag_V_tmp_mem;
							sig__M_imag_V_tmp_mem = (sig[i_0].imag()).range().to_string(SC_BIN).c_str();
							sig_tvin_wrapc_buffer[hls_map_index++].range(19, 10) = sig__M_imag_V_tmp_mem.range(9, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_sig, "%s\n", (sig_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_sig, tvin_sig);
		}

		tcl_file.set_num(1024, &tcl_file.sig_depth);
		sprintf(tvin_sig, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_sig, tvin_sig);

		// release memory allocation
		delete [] sig_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_sigRef, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_sigRef, tvin_sigRef);

		sc_bv<24>* sigRef_tvin_wrapc_buffer = new sc_bv<24>[2048];

		// RTL Name: sigRef
		{
			// bitslice(9, 0)
			{
				int hls_map_index = 0;
				// celement: sigRef._M_real.V(9, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : sigRef[i_0].real()
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : sigRef[0].real()
						// regulate_c_name       : sigRef__M_real_V
						// input_type_conversion : (sigRef[i_0].real()).range().to_string(SC_BIN).c_str()
						if (&(sigRef[0].real()) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<10> sigRef__M_real_V_tmp_mem;
							sigRef__M_real_V_tmp_mem = (sigRef[i_0].real()).range().to_string(SC_BIN).c_str();
							sigRef_tvin_wrapc_buffer[hls_map_index++].range(9, 0) = sigRef__M_real_V_tmp_mem.range(9, 0);
						}
					}
				}
			}
			// bitslice(19, 10)
			{
				int hls_map_index = 0;
				// celement: sigRef._M_imag.V(9, 0)
				{
					// carray: (0) => (2047) @ (1)
					for (int i_0 = 0; i_0 <= 2047; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : sigRef[i_0].imag()
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : sigRef[0].imag()
						// regulate_c_name       : sigRef__M_imag_V
						// input_type_conversion : (sigRef[i_0].imag()).range().to_string(SC_BIN).c_str()
						if (&(sigRef[0].imag()) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<10> sigRef__M_imag_V_tmp_mem;
							sigRef__M_imag_V_tmp_mem = (sigRef[i_0].imag()).range().to_string(SC_BIN).c_str();
							sigRef_tvin_wrapc_buffer[hls_map_index++].range(19, 10) = sigRef__M_imag_V_tmp_mem.range(9, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 2048; i++)
		{
			sprintf(tvin_sigRef, "%s\n", (sigRef_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_sigRef, tvin_sigRef);
		}

		tcl_file.set_num(2048, &tcl_file.sigRef_depth);
		sprintf(tvin_sigRef, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_sigRef, tvin_sigRef);

		// release memory allocation
		delete [] sigRef_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_prealign_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_prealign_V, tvin_prealign_V);

		sc_bv<24>* prealign_V_tvin_wrapc_buffer = new sc_bv<24>[1024];

		// RTL Name: prealign_V
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: prealign.V(17, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : prealign[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : prealign[0]
						// regulate_c_name       : prealign_V
						// input_type_conversion : (prealign[i_0]).range().to_string(SC_BIN).c_str()
						if (&(prealign[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> prealign_V_tmp_mem;
							prealign_V_tmp_mem = (prealign[i_0]).range().to_string(SC_BIN).c_str();
							prealign_V_tvin_wrapc_buffer[hls_map_index++].range(17, 0) = prealign_V_tmp_mem.range(17, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_prealign_V, "%s\n", (prealign_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_prealign_V, tvin_prealign_V);
		}

		tcl_file.set_num(1024, &tcl_file.prealign_V_depth);
		sprintf(tvin_prealign_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_prealign_V, tvin_prealign_V);

		// release memory allocation
		delete [] prealign_V_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_cmp, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_cmp, tvin_cmp);

		sc_bv<40>* cmp_tvin_wrapc_buffer = new sc_bv<40>[1024];

		// RTL Name: cmp
		{
			// bitslice(19, 0)
			{
				int hls_map_index = 0;
				// celement: cmp._M_real.V(19, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : cmp[i_0].real()
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : cmp[0].real()
						// regulate_c_name       : cmp__M_real_V
						// input_type_conversion : (cmp[i_0].real()).range().to_string(SC_BIN).c_str()
						if (&(cmp[0].real()) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<20> cmp__M_real_V_tmp_mem;
							cmp__M_real_V_tmp_mem = (cmp[i_0].real()).range().to_string(SC_BIN).c_str();
							cmp_tvin_wrapc_buffer[hls_map_index++].range(19, 0) = cmp__M_real_V_tmp_mem.range(19, 0);
						}
					}
				}
			}
			// bitslice(39, 20)
			{
				int hls_map_index = 0;
				// celement: cmp._M_imag.V(19, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : cmp[i_0].imag()
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : cmp[0].imag()
						// regulate_c_name       : cmp__M_imag_V
						// input_type_conversion : (cmp[i_0].imag()).range().to_string(SC_BIN).c_str()
						if (&(cmp[0].imag()) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<20> cmp__M_imag_V_tmp_mem;
							cmp__M_imag_V_tmp_mem = (cmp[i_0].imag()).range().to_string(SC_BIN).c_str();
							cmp_tvin_wrapc_buffer[hls_map_index++].range(39, 20) = cmp__M_imag_V_tmp_mem.range(19, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvin_cmp, "%s\n", (cmp_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_cmp, tvin_cmp);
		}

		tcl_file.set_num(1024, &tcl_file.cmp_depth);
		sprintf(tvin_cmp, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_cmp, tvin_cmp);

		// release memory allocation
		delete [] cmp_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_nL, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_nL, tvin_nL);

		sc_bv<32> nL_tvin_wrapc_buffer;

		// RTL Name: nL
		{
			// bitslice(31, 0)
			{
				// celement: nL(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : nL
						// sub_1st_elem          : 
						// ori_name_1st_elem     : nL
						// regulate_c_name       : nL
						// input_type_conversion : nL
						if (&(nL) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> nL_tmp_mem;
							nL_tmp_mem = nL;
							nL_tvin_wrapc_buffer.range(31, 0) = nL_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_nL, "%s\n", (nL_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_nL, tvin_nL);
		}

		tcl_file.set_num(1, &tcl_file.nL_depth);
		sprintf(tvin_nL, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_nL, tvin_nL);

		// [[transaction]]
		sprintf(tvin_factor_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_factor_V, tvin_factor_V);

		sc_bv<10> factor_V_tvin_wrapc_buffer;

		// RTL Name: factor_V
		{
			// bitslice(9, 0)
			{
				// celement: factor.V(9, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : factor
						// sub_1st_elem          : 
						// ori_name_1st_elem     : factor
						// regulate_c_name       : factor_V
						// input_type_conversion : (factor).range().to_string(SC_BIN).c_str()
						if (&(factor) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<10> factor_V_tmp_mem;
							factor_V_tmp_mem = (factor).range().to_string(SC_BIN).c_str();
							factor_V_tvin_wrapc_buffer.range(9, 0) = factor_V_tmp_mem.range(9, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_factor_V, "%s\n", (factor_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_factor_V, tvin_factor_V);
		}

		tcl_file.set_num(1, &tcl_file.factor_V_depth);
		sprintf(tvin_factor_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_factor_V, tvin_factor_V);

// [call_c_dut] ---------->

		AESL_ORIG_DUT_cmpy_complex_top(sig, sigRef, prealign, cmp, nL, nLExp, nLen, factor);


		// [[transaction]]
		sprintf(tvout_cmp, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_cmp, tvout_cmp);

		sc_bv<40>* cmp_tvout_wrapc_buffer = new sc_bv<40>[1024];

		// RTL Name: cmp
		{
			// bitslice(19, 0)
			{
				int hls_map_index = 0;
				// celement: cmp._M_real.V(19, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : cmp[i_0].real()
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : cmp[0].real()
						// regulate_c_name       : cmp__M_real_V
						// input_type_conversion : (cmp[i_0].real()).range().to_string(SC_BIN).c_str()
						if (&(cmp[0].real()) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<20> cmp__M_real_V_tmp_mem;
							cmp__M_real_V_tmp_mem = (cmp[i_0].real()).range().to_string(SC_BIN).c_str();
							cmp_tvout_wrapc_buffer[hls_map_index++].range(19, 0) = cmp__M_real_V_tmp_mem.range(19, 0);
						}
					}
				}
			}
			// bitslice(39, 20)
			{
				int hls_map_index = 0;
				// celement: cmp._M_imag.V(19, 0)
				{
					// carray: (0) => (1023) @ (1)
					for (int i_0 = 0; i_0 <= 1023; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : cmp[i_0].imag()
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : cmp[0].imag()
						// regulate_c_name       : cmp__M_imag_V
						// input_type_conversion : (cmp[i_0].imag()).range().to_string(SC_BIN).c_str()
						if (&(cmp[0].imag()) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<20> cmp__M_imag_V_tmp_mem;
							cmp__M_imag_V_tmp_mem = (cmp[i_0].imag()).range().to_string(SC_BIN).c_str();
							cmp_tvout_wrapc_buffer[hls_map_index++].range(39, 20) = cmp__M_imag_V_tmp_mem.range(19, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1024; i++)
		{
			sprintf(tvout_cmp, "%s\n", (cmp_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_cmp, tvout_cmp);
		}

		tcl_file.set_num(1024, &tcl_file.cmp_depth);
		sprintf(tvout_cmp, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_cmp, tvout_cmp);

		// release memory allocation
		delete [] cmp_tvout_wrapc_buffer;

		// release memory allocation: "sig"
		delete [] tvin_sig;
		// release memory allocation: "sigRef"
		delete [] tvin_sigRef;
		// release memory allocation: "prealign_V"
		delete [] tvin_prealign_V;
		// release memory allocation: "cmp"
		delete [] tvout_cmp;
		delete [] tvin_cmp;
		// release memory allocation: "nL"
		delete [] tvin_nL;
		// release memory allocation: "factor_V"
		delete [] tvin_factor_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

