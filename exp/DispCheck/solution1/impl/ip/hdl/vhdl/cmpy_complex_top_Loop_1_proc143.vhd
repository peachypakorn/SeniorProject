-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cmpy_complex_top_Loop_1_proc143 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    nL : IN STD_LOGIC_VECTOR (31 downto 0);
    refAtans_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    refAtans_V_ce0 : OUT STD_LOGIC;
    refAtans_V_we0 : OUT STD_LOGIC;
    refAtans_V_d0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    sigRef_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    sigRef_TVALID : IN STD_LOGIC;
    sigRef_TREADY : OUT STD_LOGIC;
    factor_V : IN STD_LOGIC_VECTOR (9 downto 0);
    nL_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    nL_out_full_n : IN STD_LOGIC;
    nL_out_write : OUT STD_LOGIC;
    factor_V_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    factor_V_out_full_n : IN STD_LOGIC;
    factor_V_out_write : OUT STD_LOGIC );
end;


architecture behav of cmpy_complex_top_Loop_1_proc143 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st15_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_22 : BOOLEAN;
    signal i_i_i_reg_90 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_i_i_i_reg_90_pp0_it1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_57 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TDATA_blk_n : STD_LOGIC;
    signal tmp_i_i_reg_139 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_68 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppstg_i_i_i_reg_90_pp0_it2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_i_i_i_reg_90_pp0_it3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_i_i_i_reg_90_pp0_it4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_i_i_i_reg_90_pp0_it5 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_i_i_i_reg_90_pp0_it6 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_i_i_i_reg_90_pp0_it7 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_i_i_i_reg_90_pp0_it8 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_i_i_i_reg_90_pp0_it9 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_i_i_i_reg_90_pp0_it10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_ppstg_i_i_i_reg_90_pp0_it11 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_bdd_115 : BOOLEAN;
    signal tmp_i_i_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_i_i_reg_139_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_i_i_reg_139_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_i_i_reg_139_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_i_i_reg_139_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_i_i_reg_139_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_i_i_reg_139_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_i_i_reg_139_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_i_i_reg_139_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_i_i_reg_139_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_i_i_reg_139_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_i_i_reg_139_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_123_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_143 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_return : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1980_i_i_reg_148 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_start : STD_LOGIC;
    signal grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_done : STD_LOGIC;
    signal grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_idle : STD_LOGIC;
    signal grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_ready : STD_LOGIC;
    signal grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TVALID : STD_LOGIC;
    signal grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_ce : STD_LOGIC;
    signal grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TREADY : STD_LOGIC;
    signal i_i_i_phi_fu_94_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal tmp_17_i_i_fu_129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_i_i_fu_114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_225 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component cmpy_complex_top_myatan2_complex_ap_fixed_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xin_TVALID : IN STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        xin_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        xin_TREADY : OUT STD_LOGIC;
        xin_TDATA_blk_n : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102 : component cmpy_complex_top_myatan2_complex_ap_fixed_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_start,
        ap_done => grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_done,
        ap_idle => grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_idle,
        ap_ready => grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_ready,
        xin_TVALID => grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TVALID,
        ap_ce => grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_ce,
        xin_TDATA => grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TDATA,
        xin_TREADY => grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TREADY,
        xin_TDATA_blk_n => grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TDATA_blk_n,
        ap_return => grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = tmp_i_i_fu_118_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_115))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = tmp_i_i_fu_118_p2)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_115)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = tmp_i_i_fu_118_p2)))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_115))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                end if; 
            end if;
        end if;
    end process;


    -- grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_start_ap_start_reg assign process. --
    grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = tmp_i_i_fu_118_p2)))) then 
                    grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_ready)) then 
                    grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_i_i_reg_90 assign process. --
    i_i_i_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_115))) then 
                i_i_i_reg_90 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((tmp_i_i_reg_139 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                i_i_i_reg_90 <= i_reg_143;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                ap_reg_ppstg_i_i_i_reg_90_pp0_it1 <= i_i_i_reg_90;
                ap_reg_ppstg_tmp_i_i_reg_139_pp0_it1 <= tmp_i_i_reg_139;
                tmp_i_i_reg_139 <= tmp_i_i_fu_118_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                ap_reg_ppstg_i_i_i_reg_90_pp0_it10 <= ap_reg_ppstg_i_i_i_reg_90_pp0_it9;
                ap_reg_ppstg_i_i_i_reg_90_pp0_it11 <= ap_reg_ppstg_i_i_i_reg_90_pp0_it10;
                ap_reg_ppstg_i_i_i_reg_90_pp0_it2 <= ap_reg_ppstg_i_i_i_reg_90_pp0_it1;
                ap_reg_ppstg_i_i_i_reg_90_pp0_it3 <= ap_reg_ppstg_i_i_i_reg_90_pp0_it2;
                ap_reg_ppstg_i_i_i_reg_90_pp0_it4 <= ap_reg_ppstg_i_i_i_reg_90_pp0_it3;
                ap_reg_ppstg_i_i_i_reg_90_pp0_it5 <= ap_reg_ppstg_i_i_i_reg_90_pp0_it4;
                ap_reg_ppstg_i_i_i_reg_90_pp0_it6 <= ap_reg_ppstg_i_i_i_reg_90_pp0_it5;
                ap_reg_ppstg_i_i_i_reg_90_pp0_it7 <= ap_reg_ppstg_i_i_i_reg_90_pp0_it6;
                ap_reg_ppstg_i_i_i_reg_90_pp0_it8 <= ap_reg_ppstg_i_i_i_reg_90_pp0_it7;
                ap_reg_ppstg_i_i_i_reg_90_pp0_it9 <= ap_reg_ppstg_i_i_i_reg_90_pp0_it8;
                ap_reg_ppstg_tmp_i_i_reg_139_pp0_it10 <= ap_reg_ppstg_tmp_i_i_reg_139_pp0_it9;
                ap_reg_ppstg_tmp_i_i_reg_139_pp0_it11 <= ap_reg_ppstg_tmp_i_i_reg_139_pp0_it10;
                ap_reg_ppstg_tmp_i_i_reg_139_pp0_it2 <= ap_reg_ppstg_tmp_i_i_reg_139_pp0_it1;
                ap_reg_ppstg_tmp_i_i_reg_139_pp0_it3 <= ap_reg_ppstg_tmp_i_i_reg_139_pp0_it2;
                ap_reg_ppstg_tmp_i_i_reg_139_pp0_it4 <= ap_reg_ppstg_tmp_i_i_reg_139_pp0_it3;
                ap_reg_ppstg_tmp_i_i_reg_139_pp0_it5 <= ap_reg_ppstg_tmp_i_i_reg_139_pp0_it4;
                ap_reg_ppstg_tmp_i_i_reg_139_pp0_it6 <= ap_reg_ppstg_tmp_i_i_reg_139_pp0_it5;
                ap_reg_ppstg_tmp_i_i_reg_139_pp0_it7 <= ap_reg_ppstg_tmp_i_i_reg_139_pp0_it6;
                ap_reg_ppstg_tmp_i_i_reg_139_pp0_it8 <= ap_reg_ppstg_tmp_i_i_reg_139_pp0_it7;
                ap_reg_ppstg_tmp_i_i_reg_139_pp0_it9 <= ap_reg_ppstg_tmp_i_i_reg_139_pp0_it8;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                i_reg_143 <= i_fu_123_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it10)))) then
                tmp_1980_i_i_reg_148 <= grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_return;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_115))) then
                    tmp_reg_134(31 downto 1) <= tmp_fu_108_p2(31 downto 1);
            end if;
        end if;
    end process;
    tmp_reg_134(0) <= '0';

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_sig_bdd_68, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it11, ap_reg_ppiten_pp0_it12, ap_sig_bdd_115, tmp_i_i_fu_118_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_115)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it12) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it11)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = tmp_i_i_fu_118_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it12) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it11))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = tmp_i_i_fu_118_p2) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                end if;
            when ap_ST_st15_fsm_2 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st15_fsm_2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st15_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_start, ap_done_reg, nL_out_full_n, factor_V_out_full_n)
    begin
                ap_sig_bdd_115 <= ((nL_out_full_n = ap_const_logic_0) or (factor_V_out_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_22 assign process. --
    ap_sig_bdd_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_225 assign process. --
    ap_sig_bdd_225_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_225 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_57 assign process. --
    ap_sig_bdd_57_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_57 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_68 assign process. --
    ap_sig_bdd_68_assign_proc : process(grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TDATA_blk_n, tmp_i_i_reg_139)
    begin
                ap_sig_bdd_68 <= ((grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TDATA_blk_n = ap_const_logic_0) and not((tmp_i_i_reg_139 = ap_const_lv1_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_57)
    begin
        if (ap_sig_bdd_57) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_2 assign process. --
    ap_sig_cseq_ST_st15_fsm_2_assign_proc : process(ap_sig_bdd_225)
    begin
        if (ap_sig_bdd_225) then 
            ap_sig_cseq_ST_st15_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_22)
    begin
        if (ap_sig_bdd_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    factor_V_out_din <= factor_V;

    -- factor_V_out_write assign process. --
    factor_V_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_115)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_115))) then 
            factor_V_out_write <= ap_const_logic_1;
        else 
            factor_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_ce assign process. --
    grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_ce_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_i_i_reg_139, ap_reg_ppstg_tmp_i_i_reg_139_pp0_it1, ap_reg_ppstg_tmp_i_i_reg_139_pp0_it2, ap_reg_ppstg_tmp_i_i_reg_139_pp0_it3, ap_reg_ppstg_tmp_i_i_reg_139_pp0_it4, ap_reg_ppstg_tmp_i_i_reg_139_pp0_it5, ap_reg_ppstg_tmp_i_i_reg_139_pp0_it6, ap_reg_ppstg_tmp_i_i_reg_139_pp0_it7, ap_reg_ppstg_tmp_i_i_reg_139_pp0_it8, ap_reg_ppstg_tmp_i_i_reg_139_pp0_it9, ap_reg_ppstg_tmp_i_i_reg_139_pp0_it10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (not((tmp_i_i_reg_139 = ap_const_lv1_0)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it10)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it1)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it2)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it3)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it4)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it5)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it6)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it7)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it8)) or not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it9))))) then 
            grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_ce <= ap_const_logic_1;
        else 
            grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_start <= grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_ap_start_ap_start_reg;
    grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TDATA <= sigRef_TDATA;
    grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TVALID <= sigRef_TVALID;
    i_cast_i_i_fu_114_p1 <= std_logic_vector(resize(unsigned(i_i_i_phi_fu_94_p4),32));
    i_fu_123_p2 <= std_logic_vector(unsigned(i_i_i_phi_fu_94_p4) + unsigned(ap_const_lv31_1));

    -- i_i_i_phi_fu_94_p4 assign process. --
    i_i_i_phi_fu_94_p4_assign_proc : process(i_i_i_reg_90, ap_sig_cseq_ST_pp0_stg0_fsm_1, tmp_i_i_reg_139, ap_reg_ppiten_pp0_it1, i_reg_143)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((tmp_i_i_reg_139 = ap_const_lv1_0)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            i_i_i_phi_fu_94_p4 <= i_reg_143;
        else 
            i_i_i_phi_fu_94_p4 <= i_i_i_reg_90;
        end if; 
    end process;

    nL_out_din <= nL;

    -- nL_out_write assign process. --
    nL_out_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_115)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_115))) then 
            nL_out_write <= ap_const_logic_1;
        else 
            nL_out_write <= ap_const_logic_0;
        end if; 
    end process;

    refAtans_V_address0 <= tmp_17_i_i_fu_129_p1(11 - 1 downto 0);

    -- refAtans_V_ce0 assign process. --
    refAtans_V_ce0_assign_proc : process(ap_sig_bdd_68, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it12)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it12) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            refAtans_V_ce0 <= ap_const_logic_1;
        else 
            refAtans_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    refAtans_V_d0 <= tmp_1980_i_i_reg_148;

    -- refAtans_V_we0 assign process. --
    refAtans_V_we0_assign_proc : process(ap_sig_bdd_68, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it12, ap_reg_ppstg_tmp_i_i_reg_139_pp0_it11)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it12) and not((ap_sig_bdd_68 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_i_i_reg_139_pp0_it11))))) then 
            refAtans_V_we0 <= ap_const_logic_1;
        else 
            refAtans_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sigRef_TREADY <= grp_cmpy_complex_top_myatan2_complex_ap_fixed_s_fu_102_xin_TREADY;
    tmp_17_i_i_fu_129_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_i_i_i_reg_90_pp0_it11),64));
    tmp_fu_108_p2 <= std_logic_vector(shift_left(unsigned(nL),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_i_i_fu_118_p2 <= "1" when (signed(i_cast_i_i_fu_114_p1) < signed(tmp_reg_134)) else "0";
end behav;
